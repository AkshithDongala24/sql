--single row function
a. char FUNCTION
b. NUMBER FUNCTION
   MOD(num1,num2) equivalent TO %
   TRUNC
   ROUND
   ABS
   FLOOR
   CEIL;
c. DATE FUNCTION
   1. add_months(date1,NUM)
   2. months_between(date1, date2)
   3. last_day(date1)
   4. next_day(date1,'dy')
   5. SYSDATE
d. conversion FUNCTION
   1. to_char(CHAR|NUM,'format_specifier')
   2. to_date(CHAR,'format_specifier')
   3. to_number(CHAR,'format_specifier') 
   
   
e. General FUNCTION
   1. NVL(exp1, exp2)
   2. COALESCE(exp1,exp2, exp3...., expn)
   3. NVL2(exp1,exp2,exp3);
   4. CASE
   5. DECODE
   6. NULLIF(exp1, exp2)



 
--mod
  SELECT MOD(10,3) FROM dual;
  
--abs
  SELECT ABS(10), ABS(-10) FROM dual;
  
--floor
  SELECT FLOOR(9.1), FLOOR(9.9), FLOOR(-9.1), FLOOR(-9.9) FROM dual;
  
--ceil
  SELECT CEIL(9.1), CEIL(9.9), CEIL(-9.1), CEIL(-9.9) FROM dual;
  
--trunc(num,rounding)
     01 3 5
12847.38746
       2 4
       
;
SELECT TRUNC(12847.38746), TRUNC(12847.38746,2),  
     TRUNC(12847.38746,3),  TRUNC(12847.38746,4)
FROM dual;

SELECT TRUNC(12847.38746,-2), TRUNC(12847.38746,-3),  TRUNC(12847.38746,-4)
FROM dual; --12800	12000	10000


--round
SELECT round(12847.38746), round(12847.68746), round(12847.38746,2),  
     round(12847.38746,3),  round(12847.38746,4)
FROM dual;

SELECT round(12847.38746,-2), round(12847.38746,-3),  round(12847.38746,-4)
FROM dual;
  

--date function
rule1: we can ADD OR substract THE NUMBER FROM DATE
 SELECT SYSDATE+1, SYSDATE-2 FROM dual;
 
rule2: we can substract 2 DATE

SELECT last_name,hire_date, TRUNC(SYSDATE-hire_date) AS no_of_days,
TRUNC((SYSDATE-hire_date)/30) AS no_of_months,
TRUNC(months_between(SYSDATE,hire_date)) AS no_of_months1
FROM employees;

--add_months
SELECT add_months(SYSDATE,3) FROM dual;

--last_day
SELECT last_day(SYSDATE) FROM dual;
SELECT last_name,hire_date, last_day(hire_date) 
FROM employees;


--next_day
SELECT next_day(SYSDATE,'sat') FROM dual;


1. LIST OF emp hired ON feb MONTH OF leap YEAR
SELECT last_name,hire_date
FROM employees
WHERE last_day(hire_date) LIKE '29%';


2. FETCH last_name,salary, hire_date, apprisal_date
  apprisal_date = 1st DAY OF week (Monday)  AFTER six MONTH OF hiring
  
select last_name,salary,hire_date,
next_day(add_months(hire_date,6),'mon') as appraisal_date 
from employees;


  
3. NAME,salary, no_of_year OF employee serving (ROUND it TO whole NUMBER)

select last_name,salary,hire_date,
ROUND(months_between(sysdate,hire_date)/12) as serving_years 
from employees;


--conversion function
--implicit conversion

SELECT 1+'1' FROM dual;
SELECT '1,000.00'+1 FROM dual;


      =>to_char         =>to_number
DATE              CHAR              NUMBER
       to_date<=         to_char<=


--to_char => date to char
DATE has dd mm yy hh mi SS;
SELECT to_char(SYSDATE,'dd-mm-yyyy hh:mi:ss') FROM dual;

--refer format specifier: https://docs.oracle.com/database/121/SQLRF/sql_elements004.htm#SQLRF00212

--NAME,salary,hire_date(Monday,22 Jan 1999)
SELECT last_name, salary, to_char(hire_date,'fmDay,dd Mon yyyy') AS hire_date
FROM employees;

--NAME,salary,hire_date(Monday,22nd of Jan,1999) and sort it by day hired, mon to sun
select last_name,salary,to_char(hire_date,'fmDay,ddth "of" Mon,yyyy') AS joining_date 
from employees 
order by to_char(hire_date-1,'d');


--list of emp hired on Monday

select last_name,salary,to_char(hire_date,'fmDay,ddth "of" Mon,yyyy') AS joining_date 
FROM employees
WHERE to_char(hire_date,'fmDAY')='MONDAY';

select last_name,salary,to_char(hire_date,'fmDay,ddth "of" Mon,yyyy') AS joining_date 
FROM employees
WHERE TRIM(to_char(hire_date,'DAY'))='MONDAY';

select last_name,salary,to_char(hire_date,'fmDay,ddth "of" Mon,yyyy') AS joining_date 
FROM employees
WHERE to_char(hire_date,'DY')='MON';


--to_char => number to char

SELECT to_char(123, '$999.00') FROM dual;

SELECT last_name,to_char(salary,'99,99,999.00') AS salary FROM employees;


--to_number => char to number
SELECT '2,600.00' + 10 FROM dual;

SELECT to_number('2,600.00','9,999.00') + 10 FROM dual;



--to_date => char to date
SELECT to_date('1-1-2020','dd-mm-yyyy') + 1 FROM dual;



--general function

1. NVL(exp1, exp2)
   IF exp1 IS NULL THEN exp2 ELSE exp1
   RULE: exp1 AND exp2 should be OF same TYPE.

SELECT last_name,salary,NVL(commission_pct,0), 
salary+salary*NVL(commission_pct,0) AS net_salary
FROM employees;


--last_name,salary,comm (if no comm then print no_comm, if comm then print the comm value)

SELECT last_name,salary,NVL(to_char(commission_pct),'no_comm')
FROM employees;


--nvl2(exp1, exp2, exp3)
  IF exp1 IS NOT NULL THEN exp2 ELSE exp3.
  RULE: exp2 AND exp3 should be OF same TYPE


--last_name,salary,comm (if no comm then print no_comm, if comm then print the comm)
SELECT last_name,salary,commission_pct,NVL2(commission_pct,'comm','no_comm')
FROM employees;



--case

--if emp working in dept 10 give hike of 500 bugs, 
  if emp working in dept 20 give hike OF 600 bugs
  if emp working in dept 30 give hike OF 1000 bugs
  ELSE give hike OF 100 bugs
    
  
SELECT last_name,salary,department_id,
CASE WHEN department_id=10 THEN salary+500
     WHEN department_id=20 THEN salary+600
     WHEN department_id=30 THEN salary+1000
     ELSE salary+100 
END AS new_salary
FROM employees
ORDER BY department_id;


SELECT last_name,salary,department_id,
CASE department_id WHEN 10 THEN salary+500
     WHEN 20 THEN salary+600
     WHEN 30 THEN salary+1000
     ELSE salary+100 
END AS new_salary
FROM employees
ORDER BY department_id;



--decode
SELECT last_name,
       salary,
       department_id,
       DECODE(department_id,
              10,
              salary + 500,
              20,
              salary + 600,
              30,
              salary + 1000,
              salary + 100) AS new_salary
  FROM employees
 ORDER BY department_id;
